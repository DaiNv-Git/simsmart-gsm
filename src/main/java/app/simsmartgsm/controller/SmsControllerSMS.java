package app.simsmartgsm.controller;
import app.simsmartgsm.service.SimpleGsmClient;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/sms/test")
@Slf4j
public class SmsControllerSMS {
    @PostMapping("/send")
    public ResponseEntity<String> sendSms(
            @RequestParam String comPort,
            @RequestParam String toNumber,
            @RequestParam String message) {
        try {
            // L·∫•y client v·ªõi port do PortManager qu·∫£n l√Ω
            SimpleGsmClient client = new SimpleGsmClient(comPort);

            // G·ª≠i SMS (b√™n trong ƒë√£ c√≥ synchronized theo port)
            client.sendSms(toNumber, message);

            return ResponseEntity.ok("‚úÖ SMS sent successfully to " + toNumber);
        } catch (Exception e) {
            log.error("‚ùå Error sending SMS via {}: {}", comPort, e.getMessage(), e);
            return ResponseEntity.internalServerError().body("‚ùå " + e.getMessage());
        }
    }


    /**
     * ƒê·ªçc t·∫•t c·∫£ SMS
     */
    @GetMapping("/read-all")
    public ResponseEntity<String> readAll(@RequestParam String comPort) {
        try (SimpleGsmClient client = new SimpleGsmClient(comPort)) {
            String resp = client.readAllSms();
            return ResponseEntity.ok(resp);
        } catch (Exception e) {
            log.error("‚ùå Error reading SMS via {}: {}", comPort, e.getMessage(), e);
            return ResponseEntity.internalServerError().body("‚ùå " + e.getMessage());
        }
    }

    /**
     * ƒê·ªçc SMS ch∆∞a ƒë·ªçc
     */
    @GetMapping("/read-unread")
    public ResponseEntity<String> readUnread(@RequestParam String comPort) {
        try (SimpleGsmClient client = new SimpleGsmClient(comPort)) {
            String resp = client.readUnreadSms();
            return ResponseEntity.ok(resp);
        } catch (Exception e) {
            log.error("‚ùå Error reading unread SMS via {}: {}", comPort, e.getMessage(), e);
            return ResponseEntity.internalServerError().body("‚ùå " + e.getMessage());
        }
    }

    /**
     * Xo√° to√†n b·ªô SMS
     */
    @DeleteMapping("/delete-all")
    public ResponseEntity<String> deleteAll(@RequestParam String comPort) {
        try (SimpleGsmClient client = new SimpleGsmClient(comPort)) {
            client.deleteAllSms();
            return ResponseEntity.ok("üóëÔ∏è Deleted all SMS from " + comPort);
        } catch (Exception e) {
            log.error("‚ùå Error deleting SMS via {}: {}", comPort, e.getMessage(), e);
            return ResponseEntity.internalServerError().body("‚ùå " + e.getMessage());
        }
    }
    
    
}
