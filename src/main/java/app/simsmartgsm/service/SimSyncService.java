package app.simsmartgsm.service;

import app.simsmartgsm.entity.Sim;
import app.simsmartgsm.repository.SimRepository;
import app.simsmartgsm.uitils.AtCommandHelper;
import com.fazecast.jSerialComm.SerialPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.net.InetAddress;
import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Function;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class SimSyncService {

    private final SimRepository simRepository;
    private final PortManager portManager;
    // ==== CONFIG ====
    private static final int THREAD_POOL_SIZE = 8;          // scan song song
    private static final int AT_TIMEOUT_MS = 1000;
    private static final int OPEN_READ_TIMEOUT_MS = 2000;
    private static final int MISS_THRESHOLD = 3;            // s·ªë l·∫ßn miss tr∆∞·ªõc khi replaced/unhealthy
    private static final long SCAN_TIMEOUT_MIN = 1;         // await scan thread pool
    private static final long MONITOR_LOCK_TIMEOUT_MS = 200;// th·ªùi gian ch·ªù l·∫•y kh√≥a port khi monitor
    private static final int BAUD = 115200;

    // Kh√≥a theo c·ªïng ƒë·ªÉ tr√°nh scan & monitor c√πng m·ªü m·ªôt l√∫c
    private final ConcurrentHashMap<String, ReentrantLock> portLocks = new ConcurrentHashMap<>();

    // ================== SCHEDULES ==================

    /** Full scan 15 ph√∫t/l·∫ßn: inventory + resolve */
    @Scheduled(fixedRate = 900_000)
    public void scheduledFullScan() {
        try {
            syncAndResolve();
        } catch (Exception e) {
            log.error("‚ùå L·ªói ch·∫°y scheduledFullScan: {}", e.getMessage(), e);
        }
    }

    /** Monitor health 1 ph√∫t/l·∫ßn: ping + check CCID */
    @Scheduled(fixedRate = 60_000)
    public void scheduledMonitorActivePorts() {
        try {
            monitorActivePorts();
        } catch (Exception e) {
            log.error("‚ùå L·ªói ch·∫°y scheduledMonitorActivePorts: {}", e.getMessage(), e);
        }
    }

    // ================== PUBLIC MAIN ==================

    /**
     * Lu·ªìng ch√≠nh: scan t·∫•t c·∫£ COM -> l∆∞u DB -> resolve s·ªë cho SIM ch∆∞a c√≥ s·ªë (ch·ªâ khi DB c≈©ng ch∆∞a c√≥).
     * C√≥ th·ªÉ g·ªçi t·ª´ API th·ªß c√¥ng.
     */
    public void syncAndResolve() throws Exception {
        String deviceName = InetAddress.getLocalHost().getHostName();
        log.info("=== B·∫ÆT ƒê·∫¶U SCAN cho deviceName={} ===", deviceName);

        // 1) Scan to√†n b·ªô COM
        List<ScannedSim> scanned = scanAllPorts();

        // 2) Log b·∫£ng
        logScanResult(deviceName, scanned);

        // 3) ƒê·ªìng b·ªô DB
        syncScannedToDb(deviceName, scanned);

        // 4) Ch·ªçn receiver & resolve s·ªë
        List<ScannedSim> known = scanned.stream()
                .filter(s -> s.phoneNumber != null && !s.phoneNumber.isBlank())
                .toList();

        List<ScannedSim> unknown = scanned.stream()
                .filter(s -> s.phoneNumber == null || s.phoneNumber.isBlank())
                .toList();

        if (known.isEmpty()) {
            log.warn("‚ùå Kh√¥ng c√≥ SIM n√†o c√≥ s·ªë ƒëi·ªán tho·∫°i (CNUM). B·ªè qua b∆∞·ªõc resolve.");
            return;
        }

        ScannedSim receiver = known.get(0);
        log.info("Receiver ch·ªçn: com={} phone={}", receiver.comName, receiver.phoneNumber);

        resolvePhoneNumbers(deviceName, unknown, receiver);
    }

    // ================== SCAN ==================

    /** Scan t·∫•t c·∫£ c·ªïng COM song song, ch·ªâ nh·∫≠n SIM n√†o m·ªü ƒë∆∞·ª£c v√† c√≥ ph·∫£n h·ªìi AT */
    private List<ScannedSim> scanAllPorts() throws InterruptedException {
        SerialPort[] ports = SerialPort.getCommPorts();
        log.info("T√¨m th·∫•y {} c·ªïng COM", ports.length);

        ExecutorService pool = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
        List<Future<ScannedSim>> futures = new ArrayList<>();

        for (SerialPort port : ports) {
            futures.add(pool.submit(() -> scanOnePort(port)));
        }
        pool.shutdown();
        pool.awaitTermination(SCAN_TIMEOUT_MIN, TimeUnit.MINUTES);

        List<ScannedSim> scanned = new ArrayList<>();
        for (Future<ScannedSim> f : futures) {
            try {
                ScannedSim s = f.get();
                if (s != null) scanned.add(s);
            } catch (Exception ignored) {}
        }
        return scanned;
    }

    /** Scan 1 port: m·ªü c·ªïng, g·ª≠i AT, l·∫•y CCID/IMSI/CNUM. D√πng kh√≥a theo c·ªïng ƒë·ªÉ kh√¥ng ƒë·ª•ng monitor. */
    private ScannedSim scanOnePort(SerialPort port) {
        String com = port.getSystemPortName();
        ReentrantLock lock = portLocks.computeIfAbsent(com, k -> new ReentrantLock());

        if (!tryLock(lock, 2_000)) {
            log.debug("‚è≠Ô∏è B·ªè qua scan {} v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c lock", com);
            return null;
        }

        try {
            port.setBaudRate(BAUD);
            port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, OPEN_READ_TIMEOUT_MS, OPEN_READ_TIMEOUT_MS);

            if (!port.openPort()) {
                log.debug("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c {}", com);
                return null;
            }

            try (AtCommandHelper helper = new AtCommandHelper(port)) {
                String atResp = helper.sendAndRead("AT", AT_TIMEOUT_MS);
                if (atResp == null || !atResp.contains("OK")) {
                    log.debug("‚ùå {} kh√¥ng ph·∫£n h·ªìi AT", com);
                    return null;
                }

                String ccid = helper.getCcid();
                String imsi = helper.getImsi();
                String phone = helper.getCnum(); // nhi·ªÅu m·∫°ng (Rakuten) s·∫Ω null ‚Äî ch·∫•p nh·∫≠n

                log.info("‚úÖ {} -> ccid={} imsi={} phone={}", com, ccid, imsi, phone);
                return new ScannedSim(com, ccid, imsi, phone, detectProvider(imsi));
            } catch (Exception ex) {
                log.warn("‚ùå L·ªói khi scan {}: {}", com, ex.getMessage());
                return null;
            } finally {
                if (port.isOpen()) port.closePort();
            }
        } finally {
            lock.unlock();
        }
    }

    // ================== DB SYNC ==================

    /** L∆∞u k·∫øt qu·∫£ scan & mark replaced an to√†n b·∫±ng missCount; kh√¥ng overwrite phoneNumber n·∫øu null */
    private void syncScannedToDb(String deviceName, List<ScannedSim> scanned) {
        // 1) Load DB 1 l·∫ßn
        List<Sim> dbSims = simRepository.findByDeviceName(deviceName);
        Map<String, Sim> dbMap = dbSims.stream()
                .filter(s -> s.getCcid() != null)
                .collect(Collectors.toMap(Sim::getCcid, s -> s, (a, b) -> a));

        Set<String> scannedCcids = new HashSet<>();
        List<Sim> toSave = new ArrayList<>();

        // 2) Upsert nh·ªØng SIM scan ƒë∆∞·ª£c
        for (ScannedSim ss : scanned) {
            if (ss.ccid == null) continue;
            scannedCcids.add(ss.ccid);

            Sim sim = dbMap.getOrDefault(ss.ccid,
                    Sim.builder()
                            .ccid(ss.ccid)
                            .deviceName(deviceName)
                            .comName(ss.comName)
                            .missCount(0)
                            .status("new")
                            .build());

            if ("replaced".equals(sim.getStatus()) || "unhealthy".equals(sim.getStatus())) {
                log.info("‚ôªÔ∏è SIM {} (com={}) kh√¥i ph·ª•c -> active", ss.ccid, ss.comName);
            }

            sim.setMissCount(0);
            sim.setStatus("active");
            sim.setImsi(ss.imsi);
            sim.setComName(ss.comName);
            if (ss.phoneNumber != null && !ss.phoneNumber.isBlank()) {
                // ‚ùó Kh√¥ng overwrite null l√™n DB
                sim.setPhoneNumber(ss.phoneNumber);
            }
            sim.setSimProvider(ss.simProvider);
            sim.setLastUpdated(Instant.now());

            toSave.add(sim);
        }

        // 3) SIM trong DB nh∆∞ng kh√¥ng th·∫•y ·ªü scan -> tƒÉng miss, ƒë·ªß ng∆∞·ª°ng m·ªõi replaced
        for (Sim db : dbSims) {
            if (db.getCcid() != null && !scannedCcids.contains(db.getCcid())) {
                db.setMissCount(db.getMissCount() + 1);

                if (db.getMissCount() >= MISS_THRESHOLD && "active".equals(db.getStatus())) {
                    db.setStatus("replaced");
                    log.info("‚ö†Ô∏è SIM {} (com={}) ƒë√°nh replaced sau {} l·∫ßn kh√¥ng th·∫•y",
                            db.getCcid(), db.getComName(), db.getMissCount());
                } else {
                    log.debug("‚è≥ SIM {} (com={}) ch∆∞a th·∫•y l·∫ßn {}", db.getCcid(), db.getComName(), db.getMissCount());
                }
                db.setLastUpdated(Instant.now());
                toSave.add(db);
            }
        }

        // 4) SaveAll 1 l·∫ßn
        if (!toSave.isEmpty()) simRepository.saveAll(toSave);
    }

    // ================== RESOLVE PHONE VIA SMS ==================

    /** Ch·ªâ g·ª≠i SMS test khi DB KH√îNG c√≥ s·ªë. Gom saveAll ƒë·ªÉ gi·∫£m query. */
    private void resolvePhoneNumbers(String deviceName, List<ScannedSim> unknown, ScannedSim receiver) {
        Map<String, ScannedSim> tokenMap = new HashMap<>();

        // 1. G·ª≠i SMS test
        for (ScannedSim sim : unknown) {
            if (sim.ccid == null) continue;

            String token = "CHECK-" + UUID.randomUUID().toString().substring(0, 6);
            boolean sent = sendSmsFromPort(sim.comName, receiver.phoneNumber, token);
            if (sent) {
                tokenMap.put(token, sim);
                log.info("üëâ G·ª≠i token={} t·ª´ {} -> {}", token, sim.comName, receiver.phoneNumber);
            }
        }

        if (tokenMap.isEmpty()) return;

        // 2. ƒê·ªçc inbox t·ª´ receiver duy nh·∫•t
        readAllTokensFromReceiver(deviceName, receiver.comName, tokenMap, 20_000);
    }

    private void readAllTokensFromReceiver(String deviceName, String receiverCom,
                                           Map<String, ScannedSim> tokenMap, long timeoutMs) {
        long start = System.currentTimeMillis();
        Map<String, String> resolved = new HashMap<>();

        while (System.currentTimeMillis() - start < timeoutMs && resolved.size() < tokenMap.size()) {
            Boolean ok = portManager.withPort(receiverCom, helper -> {
                try {
                    var unread = helper.listUnreadSmsText(3000);
                    for (var sms : unread) {
                        for (var entry : tokenMap.entrySet()) {
                            if (sms.body != null && sms.body.contains(entry.getKey())) {
                                ScannedSim sim = entry.getValue();
                                if (!resolved.containsKey(sim.ccid)) {
                                    resolved.put(sim.ccid, sms.sender);
                                    updateDb(deviceName, sim, sms.sender);
                                    log.info("‚úÖ Resolve SIM ccid={} com={} phone={}",
                                            sim.ccid, sim.comName, sms.sender);
                                }
                            }
                        }
                    }
                    return true;
                } catch (Exception e) {
                    log.error("‚ùå L·ªói ƒë·ªçc inbox {}: {}", receiverCom, e.getMessage());
                    return false;
                }
            }, 3000);

            if (ok == null || !ok) {
                log.warn("‚ö†Ô∏è Receiver {} kh√¥ng ƒë·ªçc ƒë∆∞·ª£c trong tick n√†y", receiverCom);
            }

            try { Thread.sleep(2000); } catch (InterruptedException ignored) {}
        }
    }


    private void updateDb(String deviceName, ScannedSim sim, String phoneNumber) {
        Sim dbSim = simRepository.findByDeviceNameAndCcid(deviceName, sim.ccid)
                .orElse(Sim.builder()
                        .ccid(sim.ccid)
                        .deviceName(deviceName)
                        .comName(sim.comName)
                        .build());

        dbSim.setPhoneNumber(phoneNumber);
        dbSim.setStatus("active");
        dbSim.setLastUpdated(Instant.now());

        simRepository.save(dbSim);
    }

    private boolean sendSmsFromPort(String fromCom, String toNumber, String token) {
        Boolean result = portManager.withPort(fromCom, helper -> {
            try {
                return helper.sendTextSms(toNumber, token, Duration.ofSeconds(15));
            } catch (Exception e) {
                log.error("G·ª≠i SMS l·ªói t·ª´ {}: {}", fromCom, e.getMessage());
                return false;
            }
        }, 2500);
        return result != null && result;
    }

    private String pollReceiverForToken(String receiverCom, String token, long timeoutMs) {
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < timeoutMs) {
            String sender = withPort(receiverCom, helper -> {
                try {
                    var unread = helper.listUnreadSmsText(3_000);
                    for (var sms : unread) {
                        if (sms.body != null && sms.body.contains(token)) {
                            return sms.sender;
                        }
                    }
                    return null;
                } catch (Exception e) {
                    log.error("ƒê·ªçc inbox receiver {} l·ªói: {}", receiverCom, e.getMessage());
                    return null;
                }
            }, 3_000);

            if (sender != null) return sender;
            try { Thread.sleep(2_000); } catch (InterruptedException ignored) {}
        }
        return null;
    }

    // ================== MONITOR HEALTH (1 ph√∫t) ==================

    private void monitorActivePorts() throws Exception {
        String deviceName = InetAddress.getLocalHost().getHostName();

        // Ch·ªâ theo d√µi SIM c·ªßa m√°y hi·ªán t·∫°i ƒë·ªÉ tr√°nh ƒë·ª•ng ch√©o
        List<Sim> sims = simRepository.findByDeviceName(deviceName);
        List<Sim> activeSims = sims.stream()
                .filter(s -> "active".equalsIgnoreCase(s.getStatus()))
                .toList();

        List<Sim> toSave = new ArrayList<>();

        for (Sim sim : activeSims) {
            String com = sim.getComName();
            // Ping an to√†n: n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c lock ‚Üí skip, KH√îNG tƒÉng missCount
            Boolean alive = withPort(com, helper -> {
                try {
                    String resp = helper.sendAndRead("AT", AT_TIMEOUT_MS);
                    return resp != null && resp.contains("OK");
                } catch (Exception e) {
                    return false;
                }
            }, MONITOR_LOCK_TIMEOUT_MS);

            if (Boolean.FALSE.equals(alive)) {
                sim.setMissCount(sim.getMissCount() + 1);
                if (sim.getMissCount() >= MISS_THRESHOLD) {
                    sim.setStatus("unhealthy");
                    log.warn("‚ö†Ô∏è SIM {} (com={}) mark unhealthy (missCount={})",
                            sim.getCcid(), sim.getComName(), sim.getMissCount());
                }
            } else if (Boolean.TRUE.equals(alive)) {
                // ƒêang alive ‚Üí ki·ªÉm tra CCID thay ƒë·ªïi (ph√°t hi·ªán thay SIM nhanh)
                String newCcid = withPort(com, helper -> {
                    try {
                        return helper.getCcid();
                    } catch (Exception e) {
                        return null;
                    }
                }, MONITOR_LOCK_TIMEOUT_MS);

                if (newCcid != null && sim.getCcid() != null && !newCcid.equals(sim.getCcid())) {
                    log.info("üîÑ SIM changed on {} oldCCID={} newCCID={}", com, sim.getCcid(), newCcid);
                    sim.setCcid(newCcid);
                    // c√≥ th·ªÉ ƒë·∫∑t 'new' ho·∫∑c gi·ªØ 'active' t√πy policy
                    sim.setStatus("active");
                }

                if ("unhealthy".equalsIgnoreCase(sim.getStatus())) {
                    log.info("‚ôªÔ∏è SIM {} (com={}) kh√¥i ph·ª•c unhealthy -> active", sim.getCcid(), com);
                }
                sim.setMissCount(0);
                sim.setStatus("active");
            } else {
                // alive == null => kh√¥ng acquire ƒë∆∞·ª£c lock, b·ªè qua tick n√†y, kh√¥ng tƒÉng miss
                log.debug("‚è≠Ô∏è B·ªè qua monitor {} v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c lock", com);
            }

            sim.setLastUpdated(Instant.now());
            toSave.add(sim);
        }

        if (!toSave.isEmpty()) simRepository.saveAll(toSave);
    }

    // ================== HELPERS ==================

    private void logScanResult(String deviceName, List<ScannedSim> scanned) {
        StringBuilder sb = new StringBuilder();
        sb.append("\n=== Scan Result for ").append(deviceName).append(" ===\n");
        sb.append(String.format("%-8s %-8s %-15s %-15s %-20s %-10s\n",
                "COM", "Status", "SIM Provider", "Phone Number", "CCID", "Content"));

        for (ScannedSim s : scanned) {
            sb.append(String.format("%-8s %-8s %-15s %-15s %-20s %-10s\n",
                    s.comName,
                    (s.ccid == null ? "ERROR" : "SUCCESS"),
                    (s.simProvider != null ? s.simProvider : ""),
                    (s.phoneNumber != null ? s.phoneNumber : ""),
                    (s.ccid != null ? s.ccid : ""),
                    (s.ccid == null ? "TIMEOUT" : "Registered")));
        }
        log.info(sb.toString());
    }

    private String detectProvider(String imsi) {
        if (imsi == null) return "Unknown";
        if (imsi.startsWith("44010")) return "NTT Docomo (JP)";
        if (imsi.startsWith("44011")) return "Rakuten Mobile (JP)"; // Rakuten th∆∞·ªùng kh√¥ng c√≥ CNUM
        if (imsi.startsWith("45204") || imsi.startsWith("45205")) return "Viettel (VN)";
        return "Unknown";
    }

    /** Generic: m·ªü port theo com v·ªõi lock an to√†n, ch·∫°y h√†m v√† ƒë√≥ng port */
    private <T> T withPort(String com, Function<AtCommandHelper, T> fn, long lockTimeoutMs) {
        ReentrantLock lock = portLocks.computeIfAbsent(com, k -> new ReentrantLock());

        if (!tryLock(lock, lockTimeoutMs)) {
            return null; // kh√¥ng l·∫•y ƒë∆∞·ª£c kh√≥a => b·ªè qua
        }

        SerialPort port = SerialPort.getCommPort(com);
        try {
            port.setBaudRate(BAUD);
            port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, OPEN_READ_TIMEOUT_MS, OPEN_READ_TIMEOUT_MS);

            if (!port.openPort()) return null;

            try (AtCommandHelper helper = new AtCommandHelper(port)) {
                return fn.apply(helper);
            } finally {
                if (port.isOpen()) port.closePort();
            }
        } catch (Exception e) {
            return null;
        } finally {
            lock.unlock();
        }
    }

    private boolean tryLock(ReentrantLock lock, long timeoutMs) {
        try {
            return lock.tryLock(timeoutMs, TimeUnit.MILLISECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return false;
        }
    }

    // DTO scan t·∫°m
    private record ScannedSim(String comName, String ccid, String imsi, String phoneNumber, String simProvider) {}
}
