package app.simsmartgsm.service;

import app.simsmartgsm.entity.Sim;
import app.simsmartgsm.repository.SimRepository;
import app.simsmartgsm.uitils.AtCommandHelper;
import com.fazecast.jSerialComm.SerialPort;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.net.InetAddress;
import java.time.Instant;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class SimSyncService {

    private final SimRepository simRepository;

    private static final int THREAD_POOL_SIZE = 8; // scan song song
    private static final int AT_TIMEOUT_MS = 1000;

    /**
     * Lu·ªìng ch√≠nh: scan t·∫•t c·∫£ COM -> l∆∞u DB -> resolve s·ªë ƒëi·ªán tho·∫°i cho SIM ch∆∞a c√≥ s·ªë.
     */
    public void syncAndResolve() throws Exception {
        String deviceName = InetAddress.getLocalHost().getHostName();
        log.info("=== B·∫ÆT ƒê·∫¶U SCAN cho deviceName={} ===", deviceName);

        // 1. Scan t·∫•t c·∫£ COM
        List<ScannedSim> scanned = scanAllPorts();

        // 2. L∆∞u DB
        syncScannedToDb(deviceName, scanned);

        // 3. Ch·ªçn receiver
        List<ScannedSim> known = scanned.stream()
                .filter(s -> s.phoneNumber != null && !s.phoneNumber.isBlank())
                .toList();

        List<ScannedSim> unknown = scanned.stream()
                .filter(s -> s.phoneNumber == null || s.phoneNumber.isBlank())
                .toList();

        if (known.isEmpty()) {
            log.warn("‚ùå Kh√¥ng c√≥ SIM n√†o c√≥ s·ªë ƒëi·ªán tho·∫°i. B·ªè qua b∆∞·ªõc resolve.");
            return;
        }

        ScannedSim receiver = known.get(0);
        log.info("Receiver ch·ªçn: com={} phone={}", receiver.comName, receiver.phoneNumber);

        // 4. Resolve cho c√°c SIM ch∆∞a bi·∫øt s·ªë
        resolvePhoneNumbers(deviceName, unknown, receiver);
    }

    /**
     * Scan t·∫•t c·∫£ c·ªïng COM song song, ch·ªâ nh·∫≠n SIM n√†o m·ªü port ƒë∆∞·ª£c v√† c√≥ ph·∫£n h·ªìi AT.
     */
    private List<ScannedSim> scanAllPorts() throws InterruptedException {
        SerialPort[] ports = SerialPort.getCommPorts();
        log.info("T√¨m th·∫•y {} c·ªïng COM", ports.length);

        ExecutorService pool = Executors.newFixedThreadPool(THREAD_POOL_SIZE);
        List<Future<ScannedSim>> futures = new ArrayList<>();

        for (SerialPort port : ports) {
            futures.add(pool.submit(() -> scanOnePort(port)));
        }
        pool.shutdown();
        pool.awaitTermination(1, TimeUnit.MINUTES);

        List<ScannedSim> scanned = new ArrayList<>();
        for (Future<ScannedSim> f : futures) {
            try {
                ScannedSim s = f.get();
                if (s != null) scanned.add(s);
            } catch (Exception ignored) {}
        }
        return scanned;
    }

    /**
     * Scan 1 port: m·ªü c·ªïng, g·ª≠i AT, l·∫•y CCID/IMSI/CNUM.
     */
    private ScannedSim scanOnePort(SerialPort port) {
        String com = port.getSystemPortName();
        port.setBaudRate(115200);
        port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 2000, 2000);

        if (!port.openPort()) {
            log.debug("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c {}", com);
            return null;
        }

        try (AtCommandHelper helper = new AtCommandHelper(port)) {
            // test AT
            String atResp = helper.sendAndRead("AT", AT_TIMEOUT_MS);
            if (atResp == null || !atResp.contains("OK")) {
                log.debug("‚ùå {} kh√¥ng ph·∫£n h·ªìi AT", com);
                return null;
            }

            String ccid = helper.getCcid();
            String imsi = helper.getImsi();
            String phone = helper.getCnum();

            log.info("‚úÖ {} -> ccid={} imsi={} phone={}", com, ccid, imsi, phone);
            return new ScannedSim(com, ccid, imsi, phone, detectProvider(imsi));
        } catch (Exception ex) {
            log.warn("‚ùå L·ªói khi scan {}: {}", com, ex.getMessage());
            return null;
        } finally {
            port.closePort();
        }
    }

    /**
     * L∆∞u k·∫øt qu·∫£ scan v√†o DB v√† mark replaced cho SIM active kh√¥ng c√≤n xu·∫•t hi·ªán.
     */
    private void syncScannedToDb(String deviceName, List<ScannedSim> scanned) {
        // 1. L·∫•y to√†n b·ªô SIM c·ªßa deviceName (1 query duy nh·∫•t)
        List<Sim> dbSims = simRepository.findByDeviceName(deviceName);
        Map<String, Sim> dbMap = dbSims.stream()
                .filter(s -> s.getCcid() != null)
                .collect(Collectors.toMap(Sim::getCcid, s -> s, (a, b) -> a));

        Set<String> scannedCcids = new HashSet<>();
        List<Sim> toSave = new ArrayList<>();

        // 2. X·ª≠ l√Ω SIM qu√©t ƒë∆∞·ª£c
        for (ScannedSim ss : scanned) {
            if (ss.ccid == null) continue;
            scannedCcids.add(ss.ccid);

            Sim sim = dbMap.getOrDefault(ss.ccid,
                    Sim.builder()
                            .ccid(ss.ccid)
                            .deviceName(deviceName)
                            .comName(ss.comName)
                            .status("new") // n·∫øu ch∆∞a c√≥ th√¨ ƒë√°nh l√† new
                            .build());

            // N·∫øu SIM t·ª´ng b·ªã replaced ‚Üí kh√¥i ph·ª•c l·∫°i th√†nh active
            if ("replaced".equals(sim.getStatus())) {
                log.info("‚ôªÔ∏è SIM ccid={} com={} ƒë∆∞·ª£c kh√¥i ph·ª•c t·ª´ replaced -> active", ss.ccid, ss.comName);
                sim.setStatus("active");
            } else {
                sim.setStatus("active");
            }

            sim.setImsi(ss.imsi);
            sim.setComName(ss.comName);
            if (ss.phoneNumber != null) sim.setPhoneNumber(ss.phoneNumber);
            sim.setSimProvider(ss.simProvider);
            sim.setLastUpdated(Instant.now());

            toSave.add(sim);
        }

        // 3. X·ª≠ l√Ω SIM trong DB m√† kh√¥ng c√≤n th·∫•y trong scan
        for (Sim db : dbSims) {
            if (db.getCcid() != null && !scannedCcids.contains(db.getCcid())) {
                if ("active".equals(db.getStatus())) {
                    db.setStatus("replaced");
                    db.setLastUpdated(Instant.now());
                    toSave.add(db);
                    log.info("‚ö†Ô∏è SIM {} (com={}) ƒë√°nh d·∫•u replaced", db.getCcid(), db.getComName());
                }
                // n·∫øu ƒë√£ replaced r·ªìi th√¨ gi·ªØ nguy√™n, kh√¥ng update th√™m
            }
        }

        // 4. Save t·∫•t c·∫£ 1 l·∫ßn
        if (!toSave.isEmpty()) {
            simRepository.saveAll(toSave);
        }
    }


    private void resolvePhoneNumbers(String deviceName, List<ScannedSim> unknown, ScannedSim receiver) {
        for (ScannedSim sim : unknown) {
            if (sim.ccid == null) continue;

            // üëâ check DB tr∆∞·ªõc
            Optional<Sim> dbSimOpt = simRepository.findByDeviceNameAndCcid(deviceName, sim.ccid);
            if (dbSimOpt.isPresent() && dbSimOpt.get().getPhoneNumber() != null) {
                log.info("‚è© B·ªè qua SIM com={} ccid={} v√¨ DB ƒë√£ c√≥ s·ªë {}",
                        sim.comName, sim.ccid, dbSimOpt.get().getPhoneNumber());
                continue;
            }

            // ch∆∞a c√≥ s·ªë trong DB => m·ªõi g·ª≠i SMS test
            String token = "CHECK-" + UUID.randomUUID().toString().substring(0, 6);
            log.info("üëâ G·ª≠i token={} t·ª´ {} -> {}", token, sim.comName, receiver.phoneNumber);

            boolean sent = sendSmsFromPort(sim.comName, receiver.phoneNumber, token);
            if (!sent) continue;

            String found = pollReceiverForToken(receiver.comName, token, 20_000);
            if (found != null) {
                log.info("‚úÖ Resolve th√†nh c√¥ng: com={} ccid={} phone={}", sim.comName, sim.ccid, found);

                Sim dbSim = dbSimOpt.orElse(Sim.builder()
                        .ccid(sim.ccid)
                        .deviceName(deviceName)
                        .comName(sim.comName)
                        .build());
                dbSim.setPhoneNumber(found);
                dbSim.setStatus("active");
                dbSim.setLastUpdated(Instant.now());
                simRepository.save(dbSim);
            }
        }

}

    private boolean sendSmsFromPort(String fromCom, String toNumber, String token) {
        SerialPort port = SerialPort.getCommPort(fromCom);
        port.setBaudRate(115200);
        port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 2000, 2000);
        if (!port.openPort()) return false;

        try (AtCommandHelper helper = new AtCommandHelper(port)) {
            return helper.sendTextSms(toNumber, token, java.time.Duration.ofSeconds(15));
        } catch (Exception e) {
            log.error("G·ª≠i SMS l·ªói t·ª´ {}: {}", fromCom, e.getMessage());
            return false;
        } finally {
            port.closePort();
        }
    }

    private String pollReceiverForToken(String receiverCom, String token, long timeoutMs) {
        long start = System.currentTimeMillis();
        while (System.currentTimeMillis() - start < timeoutMs) {
            SerialPort port = SerialPort.getCommPort(receiverCom);
            port.setBaudRate(115200);
            port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 2000, 2000);

            if (!port.openPort()) {
                try { Thread.sleep(2000); } catch (InterruptedException ignored) {}
                continue;
            }

            try (AtCommandHelper helper = new AtCommandHelper(port)) {
                var unread = helper.listUnreadSmsText(3000);
                for (var sms : unread) {
                    if (sms.body != null && sms.body.contains(token)) {
                        return sms.sender;
                    }
                }
            } catch (Exception e) {
                log.error("ƒê·ªçc inbox receiver {} l·ªói: {}", receiverCom, e.getMessage());
            } finally {
                port.closePort();
            }

            try { Thread.sleep(2000); } catch (InterruptedException ignored) {}
        }
        return null;
    }

    private String detectProvider(String imsi) {
        if (imsi == null) return null;
        if (imsi.startsWith("44010")) return "NTT Docomo (JP)";
        if (imsi.startsWith("44011")) return "Rakuten Mobile (JP)";
        if (imsi.startsWith("45204") || imsi.startsWith("45205")) return "Viettel (VN)";
        return "Unknown";
    }

    private record ScannedSim(String comName, String ccid, String imsi, String phoneNumber, String simProvider) {}
}
